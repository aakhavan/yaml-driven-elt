x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: docker/Dockerfile
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-meta:5432/airflow
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW_CONN_MINIO_S3: ${AIRFLOW_CONN_MINIO_S3}
    AIRFLOW_CONN_POSTGRES_WAREHOUSE: ${AIRFLOW_CONN_POSTGRES_WAREHOUSE}
    # For DAG logic to pass to GX containers
    MINIO_ROOT_USER: ${MINIO_ROOT_USER}
    MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    DEFAULT_DATA_BUCKET: ${DEFAULT_DATA_BUCKET}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - ./dbt:/opt/airflow/dbt
    - ./great_expectations:/opt/airflow/great_expectations

services:
  postgres-meta:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 20

  postgres-warehouse:
    image: postgres:15
    environment:
      POSTGRES_USER: warehouse
      POSTGRES_PASSWORD: warehouse
      POSTGRES_DB: warehouse
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse -d warehouse"]
      interval: 5s
      timeout: 5s
      retries: 20

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  minio-seed:
    build:
      context: .
      dockerfile: docker/Dockerfile.minio
    container_name: minio-seed
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ALIAS: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: olist
      # Optional tuning for readiness retries
      MINIO_READY_RETRIES: "90"
      MINIO_READY_SLEEP: "2"
    volumes:
      - ./data:/seed/data:ro
    restart: "no"

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres-meta:
        condition: service_healthy
    command:
      - bash
      - -lc
      - |
        airflow db upgrade && \
        airflow users create \
          --role Admin \
          --username airflow \
          --password airflow \
          --firstname Airflow \
          --lastname Airflow \
          --email admin@example.com \
        || airflow users reset-password --username airflow --password airflow
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-meta:
        condition: service_healthy
      postgres-warehouse:
        condition: service_healthy
      minio:
        condition: service_started
      minio-seed:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    command: ["airflow", "webserver"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./dbt:/opt/airflow/dbt
      - ./great_expectations:/opt/airflow/great_expectations
      - /var/run/docker.sock:/var/run/docker.sock

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-meta:
        condition: service_healthy
      postgres-warehouse:
        condition: service_healthy
      minio:
        condition: service_started
      minio-seed:
        condition: service_completed_successfully
    command: ["airflow", "scheduler"]
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/plugins:/opt/airflow/plugins
      - ./dbt:/opt/airflow/dbt
      - ./great_expectations:/opt/airflow/great_expectations
      - /var/run/docker.sock:/var/run/docker.sock

  gx-runner:
    image: yaml_driven_elt/gx-runner:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.gx
    depends_on:
      postgres-warehouse:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql+psycopg2://warehouse:warehouse@postgres-warehouse:5432/warehouse
      GX_CONTEXT_ROOT_DIR: /app/gx
    volumes:
      - ./airflow/dags/configs/olist.yml:/app/config.yml:ro
      - ./great_expectations/validations:/app/output
      - ./great_expectations/context:/app/gx
    command: ["python", "/app/gx_runner.py", "--config", "/app/config.yml", "--source-id", "olist_poc", "--build-docs"]
    restart: "no"

volumes:
  minio_data: