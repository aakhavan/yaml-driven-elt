x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: docker/Dockerfile
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"
    AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-meta:5432/airflow
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW_CONN_MINIO_S3: ${AIRFLOW_CONN_MINIO_S3}
    AIRFLOW_CONN_POSTGRES_WAREHOUSE: ${AIRFLOW_CONN_POSTGRES_WAREHOUSE}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/plugins:/opt/airflow/plugins
    - ./dbt:/opt/airflow/dbt
    - ./great_expectations:/opt/airflow/great_expectations

services:
  postgres-meta:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 20

  postgres-warehouse:
    image: postgres:15
    environment:
      POSTGRES_USER: warehouse
      POSTGRES_PASSWORD: warehouse
      POSTGRES_DB: warehouse
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse -d warehouse"]
      interval: 5s
      timeout: 5s
      retries: 20

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data

  minio-seed:
    image: quay.io/minio/mc:latest
    container_name: minio-seed
    depends_on:
      - minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ALIAS: minio
      MINIO_ENDPOINT: http://minio:9000
      MINIO_BUCKET: olist
    volumes:
      - ./data:/seed/data:ro
    entrypoint:
      - /bin/sh
      - -lc
      - |
        set -e

        : "$${MINIO_ALIAS:=minio}"
        : "$${MINIO_ENDPOINT:=http://minio:9000}"
        : "$${MINIO_BUCKET:=olist}"

        echo "Configuring mc alias..."
        mc alias set "$${MINIO_ALIAS}" "$${MINIO_ENDPOINT}" "$${MINIO_ROOT_USER}" "$${MINIO_ROOT_PASSWORD}"

        echo "Waiting for MinIO..."
        until mc ls "$${MINIO_ALIAS}" >/dev/null 2>&1; do
          sleep 2
        done

        echo "Creating bucket $${MINIO_BUCKET} (if not exists)..."
        mc mb -p "$${MINIO_ALIAS}/$${MINIO_BUCKET}" || true

        echo "Uploading CSV files from /seed/data..."
        if ls /seed/data/*.csv >/dev/null 2>&1; then
          mc cp --recursive /seed/data/*.csv "$${MINIO_ALIAS}/$${MINIO_BUCKET}/"
        else
          echo "No CSV files found in /seed/data"
        fi

        echo "Listing bucket contents:"
        mc ls "$${MINIO_ALIAS}/$${MINIO_BUCKET}" || true
    restart: "no"

  airflow-init:
    <<: *airflow-common
    depends_on:
      postgres-meta:
        condition: service_healthy
    command:
      - bash
      - -lc
      - |
        airflow db upgrade && \
        airflow users create \
          --role Admin \
          --username airflow \
          --password airflow \
          --firstname Airflow \
          --lastname Airflow \
          --email admin@example.com \
        || airflow users reset-password --username airflow --password airflow
    restart: "no"

  airflow-webserver:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-meta:
        condition: service_healthy
      postgres-warehouse:
        condition: service_healthy
      minio:
        condition: service_started
      minio-seed:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
    command: ["airflow", "webserver"]

  airflow-scheduler:
    <<: *airflow-common
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres-meta:
        condition: service_healthy
      postgres-warehouse:
        condition: service_healthy
      minio:
        condition: service_started
      minio-seed:
        condition: service_completed_successfully
    command: ["airflow", "scheduler"]

  gx-runner:
    build:
      context: .
      dockerfile: docker/Dockerfile.gx
    depends_on:
      postgres-warehouse:
        condition: service_healthy
    environment:
      # Point GX to the warehouse DB inside the compose network
      DATABASE_URL: postgresql+psycopg2://warehouse:warehouse@postgres-warehouse:5432/warehouse
      GX_CONTEXT_ROOT_DIR: /app/gx
    volumes:
      # Mount YAML config as /app/config.yml (read-only)
      - ./airflow/dags/configs/olist.yml:/app/config.yml:ro
      # Capture validation JSON outputs locally
      - ./great_expectations/validations:/app/output
      # Persist Great Expectations context (suites, checkpoints, Data Docs)
      - ./great_expectations/context:/app/gx
    command: ["python", "/app/gx_runner.py", "--config", "/app/config.yml", "--source-id", "olist_poc", "--build-docs"]
    restart: "no"

volumes:
  minio_data: